using System;
using System.Drawing;
using System.Windows.Forms;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using AceCook.Models;
using AceCook.Repositories;
using System.Globalization;

namespace AceCook
{
    public partial class OrderManagementForm : Form
    {
        private readonly AppDbContext _context;
        private readonly OrderRepository _orderRepository;
        private DataGridView dataGridViewOrders;
        private TextBox txtSearch;
        private ComboBox cboStatusFilter;
        private DateTimePicker dtpStartDate;
        private DateTimePicker dtpEndDate;
        private Button btnSearch;
        private Button btnReset;
        private Button btnCreateOrder;
        private Button btnRefresh;
        private Label lblTitle;
        private Label lblSearch;
        private Label lblStatusFilter;
        private Label lblDateRange;
        private Panel pnlFilters;
        private Panel pnlActions;

        public OrderManagementForm(AppDbContext context)
        {
            _context = context;
            _orderRepository = new OrderRepository(context);
            InitializeComponent();
            SetupUI();
            LoadOrders();
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            this.Text = "Qu·∫£n l√Ω ƒê∆°n h√†ng";
            this.Size = new Size(1400, 800);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.BackColor = Color.FromArgb(248, 249, 250);
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            
            this.ResumeLayout(false);
        }

        private void SetupUI()
        {
            // Title
            lblTitle = new Label
            {
                Text = "QU·∫¢N L√ù ƒê∆†N H√ÄNG",
                Font = new Font("Segoe UI", 20, FontStyle.Bold),
                ForeColor = Color.FromArgb(52, 73, 94),
                Dock = DockStyle.Top,
                Height = 70, // tƒÉng l√™n
                TextAlign = ContentAlignment.MiddleLeft,
            };

            // Filters Panel
            pnlFilters = new FlowLayoutPanel
            {
                Dock = DockStyle.Top,
                Height = 90,
                BackColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                Padding = new Padding(15),
                FlowDirection = FlowDirection.LeftToRight,
                AutoScroll = true,
                WrapContents = false,
                Margin = new Padding(0, 200, 0, 150) // Th√™m d√≤ng n√†y ƒë·ªÉ t·∫°o kho·∫£ng c√°ch ph√≠a tr√™n

            };

            lblSearch = new Label
            {
                Text = "T√¨m ki·∫øm:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                AutoSize = true,
                TextAlign = ContentAlignment.MiddleLeft,
                Margin = new Padding(0, 8, 10, 0)
            };

            txtSearch = new TextBox
            {
                Width = 300,
                Font = new Font("Segoe UI", 10),
                PlaceholderText = "M√£ ƒë∆°n h√†ng, t√™n KH, tr·∫°ng th√°i...",
                Margin = new Padding(0, 5, 20, 0)
            };
            txtSearch.TextChanged += TxtSearch_TextChanged;

            lblStatusFilter = new Label
            {
                Text = "Tr·∫°ng th√°i:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                AutoSize = true,
                Margin = new Padding(0, 8, 10, 0)
            };

            cboStatusFilter = new ComboBox
            {
                Width = 180,
                Font = new Font("Segoe UI", 10),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Margin = new Padding(0, 5, 20, 0)
            };
            cboStatusFilter.Items.AddRange(new object[] { "T·∫•t c·∫£", "Ch·ªù x·ª≠ l√Ω", "ƒêang x·ª≠ l√Ω", "ƒê√£ giao", "ƒê√£ h·ªßy" });
            cboStatusFilter.SelectedIndex = 0;
            cboStatusFilter.SelectedIndexChanged += CboStatusFilter_SelectedIndexChanged;

            lblDateRange = new Label
            {
                Text = "T·ª´ ng√†y:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                AutoSize = true,
                Margin = new Padding(0, 8, 10, 0)
            };

            dtpStartDate = new DateTimePicker
            {
                Width = 200,
                Font = new Font("Segoe UI", 10),
                Format = DateTimePickerFormat.Short,
                Value = DateTime.Now.AddDays(-30),
                Margin = new Padding(0, 5, 10, 0)
            };

            var lblToDate = new Label
            {
                Text = "ƒë·∫øn:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                AutoSize = true,
                Margin = new Padding(0, 8, 10, 0)
            };

            dtpEndDate = new DateTimePicker
            {
                Width = 200,
                Font = new Font("Segoe UI", 10),
                Format = DateTimePickerFormat.Short,
                Value = DateTime.Now,
                Margin = new Padding(0, 5, 10, 0)
            };

            btnSearch = new Button
            {
                Text = "üîç T√¨m ki·∫øm",
               Width = 200,
                Height = 40,
                Font = new Font("Segoe UI", 9, FontStyle.Bold),
                BackColor = Color.FromArgb(52, 152, 219),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Margin = new Padding(0, 5, 10, 0)
            };
            btnSearch.FlatAppearance.BorderSize = 0;
            btnSearch.Click += BtnSearch_Click;

            btnReset = new Button
            {
                Text = "üîÑ L√†m m·ªõi",
                Width = 200,
                Height = 40,
                Font = new Font("Segoe UI", 9, FontStyle.Bold),
                BackColor = Color.FromArgb(95, 95, 95),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Margin = new Padding(0, 5, 10, 0)
            };
            btnReset.FlatAppearance.BorderSize = 0;
            btnReset.Click += BtnReset_Click;

            pnlFilters.Controls.AddRange(new Control[] {
        lblSearch, txtSearch, lblStatusFilter, cboStatusFilter,
        lblDateRange, dtpStartDate, lblToDate, dtpEndDate,
        btnSearch, btnReset
    });

            // Actions Panel
            pnlActions = new FlowLayoutPanel
            {
                Dock = DockStyle.Top,
                Height = 90,
                FlowDirection = FlowDirection.LeftToRight,
                Padding = new Padding(15),
                BackColor = Color.Transparent
            };

            btnCreateOrder = CreateActionButton("‚ûï T·∫°o ƒë∆°n", Color.FromArgb(46, 204, 113));
            btnCreateOrder.Click += BtnCreateOrder_Click;

            btnRefresh = CreateActionButton("üîÑ L√†m m·ªõi", Color.FromArgb(52, 152, 219));
            btnRefresh.Click += BtnRefresh_Click;

            var btnEditOrder = CreateActionButton("‚úèÔ∏è Ch·ªânh s·ª≠a", Color.FromArgb(255, 193, 7));
            btnEditOrder.Click += BtnEditOrder_Click;

            var btnDeleteOrder = CreateActionButton("üóëÔ∏è X√≥a", Color.FromArgb(231, 76, 60));
            btnDeleteOrder.Click += BtnDeleteOrder_Click;

            pnlActions.Controls.AddRange(new Control[] { btnCreateOrder, btnRefresh, btnEditOrder, btnDeleteOrder });

            // DataGridView
            dataGridViewOrders = new DataGridView
            {
                Dock = DockStyle.Fill,
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill,
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                ReadOnly = true,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                MultiSelect = false,
                BackgroundColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                GridColor = Color.LightGray,
                RowHeadersVisible = false,
                CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal,
                ColumnHeadersHeight = 50,
                RowTemplate = { Height = 50 }
            };
            dataGridViewOrders.DefaultCellStyle.Font = new Font("Segoe UI", 9);
            dataGridViewOrders.ColumnHeadersDefaultCellStyle.Font = new Font("Segoe UI", 10, FontStyle.Bold);
            dataGridViewOrders.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(52, 73, 94);
            dataGridViewOrders.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
            dataGridViewOrders.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dataGridViewOrders.DefaultCellStyle.SelectionBackColor = Color.FromArgb(52, 152, 219);
            dataGridViewOrders.DefaultCellStyle.SelectionForeColor = Color.White;

            // Add all to form
            this.Controls.AddRange(new Control[] { dataGridViewOrders, pnlActions, pnlFilters, lblTitle });
        }

        // Helper to create buttons
        private Button CreateActionButton(string text, Color backColor)
        {
            var btn = new Button
            {
                Text = text,
                Width = 250,
                Height = 60,
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                BackColor = backColor,
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Margin = new Padding(0, 0, 15, 0),
                Cursor = Cursors.Hand
            };
            btn.FlatAppearance.BorderSize = 0;
            return btn;
        }


        private async void LoadOrders()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("Loading orders...");
                var orders = await _orderRepository.GetAllOrdersAsync();
                System.Diagnostics.Debug.WriteLine($"Loaded {orders?.Count ?? 0} orders");
                
                if (orders == null)
                {
                    MessageBox.Show("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng!", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                
                RefreshDataGridView(orders);
            }
            catch (InvalidOperationException ex)
            {
                MessageBox.Show(ex.Message, "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in LoadOrders: {ex.Message}");
                MessageBox.Show($"L·ªói khi t·∫£i d·ªØ li·ªáu ƒë∆°n h√†ng: {ex.Message}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void RefreshDataGridView(List<Dondathang> orders)
        {
            dataGridViewOrders.DataSource = null;
            dataGridViewOrders.Columns.Clear();

            // Create custom columns
            dataGridViewOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "MaDdh",
                HeaderText = "M√£ ƒë∆°n h√†ng",
                Width = 120
            });

            dataGridViewOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "CustomerInfo",
                HeaderText = "Th√¥ng tin kh√°ch h√†ng",
                Width = 200
            });

            dataGridViewOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "NgayDat",
                HeaderText = "Ng√†y ƒë·∫∑t",
                Width = 120
            });

            dataGridViewOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "NgayGiao",
                HeaderText = "Ng√†y giao",
                Width = 120
            });

            dataGridViewOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "EmployeeInfo",
                HeaderText = "Nh√¢n vi√™n x·ª≠ l√Ω",
                Width = 150
            });

            dataGridViewOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "TrangThai",
                HeaderText = "Tr·∫°ng th√°i",
                Width = 120
            });

            dataGridViewOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "TotalAmount",
                HeaderText = "T·ªïng ti·ªÅn",
                Width = 120
            });

            dataGridViewOrders.Columns.Add(new DataGridViewButtonColumn
            {
                Name = "ViewDetails",
                HeaderText = "H√†nh ƒë·ªông",
                Width = 100,
                Text = "üëÅÔ∏è Xem",
                UseColumnTextForButtonValue = true
            });

            // Populate data
            foreach (var order in orders)
            {
                try
                {
                    var rowIndex = dataGridViewOrders.Rows.Add();
                    var row = dataGridViewOrders.Rows[rowIndex];

                    row.Cells["MaDdh"].Value = order.MaDdh ?? "N/A";
                    
                    // X·ª≠ l√Ω th√¥ng tin kh√°ch h√†ng an to√†n
                    var customerName = order.MaKhNavigation?.TenKh ?? "N/A";
                    var customerPhone = order.MaKhNavigation?.Sdtkh ?? "N/A";
                    row.Cells["CustomerInfo"].Value = $"{customerName}\n{customerPhone}";
                    
                    row.Cells["NgayDat"].Value = order.NgayDat?.ToString("dd/MM/yyyy") ?? "N/A";
                    row.Cells["NgayGiao"].Value = order.NgayGiao?.ToString("dd/MM/yyyy") ?? "Ch∆∞a giao";
                    
                    // X·ª≠ l√Ω th√¥ng tin nh√¢n vi√™n an to√†n
                    row.Cells["EmployeeInfo"].Value = order.MaNvNavigation?.HoTenNv ?? "N/A";
                    row.Cells["TrangThai"].Value = order.TrangThai ?? "Ch·ªù x·ª≠ l√Ω";
                    
                    // Calculate total amount an to√†n
                    decimal totalAmount = 0;
                    if (order.CtDhs != null && order.CtDhs.Any())
                    {
                        totalAmount = order.CtDhs.Sum(ct => (decimal)((ct.SoLuong ?? 0) * (ct.DonGia ?? 0)));
                    }
                    row.Cells["TotalAmount"].Value = totalAmount.ToString("N0") + " VNƒê";

                    // Style status column
                    StyleStatusCell(row.Cells["TrangThai"], order.TrangThai);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Error processing order {order.MaDdh}: {ex.Message}");
                    // B·ªè qua d√≤ng l·ªói v√† ti·∫øp t·ª•c
                }
            }

            // Handle button clicks
            dataGridViewOrders.CellClick += DataGridViewOrders_CellClick;
            
            // Add double-click to view details
            dataGridViewOrders.CellDoubleClick += DataGridViewOrders_CellDoubleClick;
        }

        private void StyleStatusCell(DataGridViewCell cell, string status)
        {
            if (status == "Ho√†n th√†nh" || status == "ƒê√£ giao")
            {
                cell.Style.ForeColor = Color.Green;
            }
            else if (status == "ƒêang x·ª≠ l√Ω")
            {
                cell.Style.ForeColor = Color.Orange;
            }
            else if (status == "ƒê√£ h·ªßy")
            {
                cell.Style.ForeColor = Color.Red;
            }
            else
            {
                cell.Style.ForeColor = Color.Blue;
            }
        }

        private bool _isProcessing = false;

        private async void DataGridViewOrders_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0 && !_isProcessing)
            {
                try
                {
                    _isProcessing = true;
                    
                    // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi x·ª≠ l√Ω
                    if (dataGridViewOrders.Rows[e.RowIndex].Cells["MaDdh"].Value == null)
                    {
                        MessageBox.Show("Kh√¥ng th·ªÉ ƒë·ªçc m√£ ƒë∆°n h√†ng!", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    
                    var orderId = dataGridViewOrders.Rows[e.RowIndex].Cells["MaDdh"].Value.ToString();
                    
                    if (e.ColumnIndex == dataGridViewOrders.Columns["ViewDetails"].Index)
                    {
                        var order = await _orderRepository.GetOrderByIdAsync(orderId);
                        if (order != null)
                        {
                            ViewOrderDetails(order);
                        }
                        else
                        {
                            MessageBox.Show($"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng {orderId}!", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
                catch (InvalidOperationException ex)
                {
                    MessageBox.Show(ex.Message, "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"L·ªói khi x·ª≠ l√Ω thao t√°c: {ex.Message}", "L·ªói",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    _isProcessing = false;
                }
            }
        }

        private void ViewOrderDetails(Dondathang order)
        {
            try
            {
                // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi m·ªü form
                if (order == null)
                {
                    MessageBox.Show("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng!", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                // Ki·ªÉm tra c√°c navigation properties
                if (order.CtDhs == null)
                {
                    order.CtDhs = new List<CtDh>();
                }

                var viewForm = new OrderAddEditForm(order, true); // true = view mode
                viewForm.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi m·ªü form xem chi ti·∫øt: {ex.Message}\n\nChi ti·∫øt: {ex.StackTrace}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void EditOrder(Dondathang order)
        {
            try
            {
                var editForm = new OrderAddEditForm(order, false); // false = edit mode
                if (editForm.ShowDialog() == DialogResult.OK)
                {
                    LoadOrders(); // Reload data after edit
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi m·ªü form ch·ªânh s·ª≠a: {ex.Message}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task ChangeOrderStatus(string orderId, string newStatus)
        {
            try
            {
                var success = await _orderRepository.UpdateOrderStatusAsync(orderId, newStatus);
                if (success)
                {
                    MessageBox.Show($"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng {orderId} th√†nh '{newStatus}'", 
                        "Th√†nh c√¥ng", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    LoadOrders(); // Reload data
                }
                else
                {
                    MessageBox.Show("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng!", 
                        "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: {ex.Message}", 
                    "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void DeleteOrder(Dondathang order)
        {
            var result = MessageBox.Show($"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng {order.MaDdh}?\n\n" +
                                       $"Kh√°ch h√†ng: {order.MaKhNavigation?.TenKh ?? "N/A"}\n" +
                                       $"Ng√†y ƒë·∫∑t: {order.NgayDat?.ToString("dd/MM/yyyy") ?? "N/A"}\n" +
                                       $"Tr·∫°ng th√°i: {order.TrangThai ?? "N/A"}\n\n" +
                                       "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!", 
                                       "X√°c nh·∫≠n x√≥a", 
                                       MessageBoxButtons.YesNo, 
                                       MessageBoxIcon.Warning);

            if (result == DialogResult.Yes)
            {
                try
                {
                    var success = await _orderRepository.DeleteOrderAsync(order.MaDdh);
                    if (success)
                    {
                        MessageBox.Show($"ƒê√£ x√≥a ƒë∆°n h√†ng {order.MaDdh} th√†nh c√¥ng!", 
                            "Th√†nh c√¥ng", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        LoadOrders(); // Reload data
                    }
                    else
                    {
                        MessageBox.Show("Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng!", 
                            "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"L·ªói khi x√≥a ƒë∆°n h√†ng: {ex.Message}", 
                        "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }


        private System.Windows.Forms.Timer _searchTimer;
        private bool _isSearching = false;

        private void TxtSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                // T·∫°o timer ƒë·ªÉ tr√°nh t√¨m ki·∫øm qu√° nhi·ªÅu l·∫ßn
                if (_searchTimer == null)
                {
                    _searchTimer = new System.Windows.Forms.Timer();
                    _searchTimer.Interval = 500; // Delay 500ms
                    _searchTimer.Tick += async (s, args) =>
                    {
                        _searchTimer.Stop();
                        if (!_isSearching)
                        {
                            await ApplySearchOnly();
                        }
                    };
                }
                
                // Reset timer
                _searchTimer.Stop();
                _searchTimer.Start();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in TxtSearch_TextChanged: {ex.Message}");
            }
        }

        private async Task ApplySearchOnly()
        {
            if (_isSearching) return;
            
            try
            {
                _isSearching = true;
                string searchText = txtSearch.Text.Trim();
                
                if (!string.IsNullOrEmpty(searchText))
                {
                    // S·ª≠ d·ª•ng SearchOrdersAsync method ƒë√£ c√≥ s·∫µn
                    var filteredOrders = await _orderRepository.SearchOrdersAsync(searchText);
                    RefreshDataGridView(filteredOrders);
                    
                    // Update title v·ªõi s·ªë l∆∞·ª£ng k·∫øt qu·∫£
                    var resultCount = filteredOrders.Count;
                    this.Text = $"Qu·∫£n l√Ω ƒê∆°n h√†ng - T√¨m th·∫•y {resultCount} ƒë∆°n h√†ng";
                }
                else
                {
                    // N·∫øu kh√¥ng c√≥ text t√¨m ki·∫øm, load l·∫°i t·∫•t c·∫£ ƒë∆°n h√†ng
                    LoadOrders();
                    this.Text = "Qu·∫£n l√Ω ƒê∆°n h√†ng";
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in ApplySearchOnly: {ex.Message}");
                MessageBox.Show($"L·ªói khi t√¨m ki·∫øm: {ex.Message}", "L·ªói", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                _isSearching = false;
            }
        }

        private async void CboStatusFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            await ApplyFilters();
        }

        private async void BtnSearch_Click(object sender, EventArgs e)
        {
            await ApplyFilters();
        }

        private async void BtnReset_Click(object sender, EventArgs e)
        {
            try
            {
                // Reset t·∫•t c·∫£ filters
                txtSearch.Text = "";
                cboStatusFilter.SelectedIndex = 0;
                dtpStartDate.Value = DateTime.Now.AddDays(-30);
                dtpEndDate.Value = DateTime.Now;
                
                // Reset title
                this.Text = "Qu·∫£n l√Ω ƒê∆°n h√†ng";
                
                // Load l·∫°i t·∫•t c·∫£ ƒë∆°n h√†ng
                LoadOrders();
                
                MessageBox.Show("ƒê√£ reset b·ªô l·ªçc v√† t·∫£i l·∫°i d·ªØ li·ªáu!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi reset b·ªô l·ªçc: {ex.Message}", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void BtnRefresh_Click(object sender, EventArgs e)
        {
            LoadOrders();
            MessageBox.Show("ƒê√£ t·∫£i l·∫°i d·ªØ li·ªáu!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private async void DataGridViewOrders_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0 && 
                e.ColumnIndex != dataGridViewOrders.Columns["ViewDetails"].Index)
            {
                try
                {
                    var orderId = dataGridViewOrders.Rows[e.RowIndex].Cells["MaDdh"].Value.ToString();
                    var order = await _orderRepository.GetOrderByIdAsync(orderId);
                    if (order != null)
                    {
                        ViewOrderDetails(order);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"L·ªói khi xem chi ti·∫øt: {ex.Message}", "L·ªói",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private async Task ApplyFilters()
        {
            if (_isSearching) return;
            
            try
            {
                // Get filter values
                var searchTerm = txtSearch.Text.Trim();
                var status = cboStatusFilter.SelectedIndex > 0 ? cboStatusFilter.SelectedItem.ToString() : null;
                
                // Validation ng√†y th√°ng
                if (dtpStartDate.Value > dtpEndDate.Value)
                {
                    MessageBox.Show("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c!", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                
                // S·ª≠ d·ª•ng DateTime thay v√¨ DateOnly ƒë·ªÉ tr√°nh l·ªói LINQ translation
                var startDate = dtpStartDate.Value.Date;
                var endDate = dtpEndDate.Value.Date.AddDays(1).AddSeconds(-1); // ƒê·∫øn cu·ªëi ng√†y

                // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t√¨m ki·∫øm
                this.Cursor = Cursors.WaitCursor;
                btnSearch.Enabled = false;
                btnSearch.Text = "ƒêang t√¨m...";

                // Get filtered orders from repository - s·ª≠ d·ª•ng method c√≥ s·∫µn
                var orders = await _orderRepository.GetOrdersByDateRangeAsync(startDate, endDate);
                
                // N·∫øu c√≥ search term, filter th√™m theo text
                if (!string.IsNullOrEmpty(searchTerm))
                {
                    orders = orders.Where(d => 
                        d.MaDdh.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        (d.MaKhNavigation?.TenKh?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                        (d.TrangThai?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true)
                    ).ToList();
                }
                
                // N·∫øu c√≥ status filter, filter th√™m theo status
                if (!string.IsNullOrEmpty(status))
                {
                    orders = orders.Where(d => d.TrangThai == status).ToList();
                }

                RefreshDataGridView(orders);
                
                // Show result count
                var resultCount = orders.Count;
                this.Text = $"Qu·∫£n l√Ω ƒê∆°n h√†ng - Hi·ªÉn th·ªã {resultCount} ƒë∆°n h√†ng";
                
                // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
                if (resultCount == 0)
                {
                    MessageBox.Show("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán t√¨m ki·∫øm!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (InvalidOperationException ex)
            {
                MessageBox.Show(ex.Message, "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi √°p d·ª•ng b·ªô l·ªçc: {ex.Message}", 
                    "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                // Kh√¥i ph·ª•c tr·∫°ng th√°i
                this.Cursor = Cursors.Default;
                btnSearch.Enabled = true;
                btnSearch.Text = "üîç T√¨m ki·∫øm";
            }
        }

        private async void BtnCreateOrder_Click(object sender, EventArgs e)
        {
            if (_isProcessing) return;
            
            try
            {
                _isProcessing = true;
                var addForm = new OrderAddEditForm(); // S·ª≠ d·ª•ng constructor m·∫∑c ƒë·ªãnh ƒë·ªÉ t·∫°o ƒë∆°n h√†ng m·ªõi
                if (addForm.ShowDialog() == DialogResult.OK)
                {
                    LoadOrders(); // Reload data after adding
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi m·ªü form th√™m ƒë∆°n h√†ng: {ex.Message}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                _isProcessing = false;
            }
        }

        private async void BtnEditOrder_Click(object sender, EventArgs e)
        {
            if (_isProcessing) return;
            
            if (dataGridViewOrders.SelectedRows.Count > 0)
            {
                try
                {
                    _isProcessing = true;
                    var selectedRow = dataGridViewOrders.SelectedRows[0];
                    var orderId = selectedRow.Cells["MaDdh"].Value?.ToString();
                    var order = await _orderRepository.GetOrderByIdAsync(orderId);
                    
                    if (order != null)
                    {
                        // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
                        if (order.TrangThai == "Ho√†n th√†nh" || order.TrangThai == "ƒê√£ giao")
                        {
                            MessageBox.Show($"Kh√¥ng th·ªÉ ch·ªânh s·ª≠a ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i '{order.TrangThai}'!\n\n" +
                                          "Ch·ªâ c√≥ th·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng n√†y.", 
                                          "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a", 
                                          MessageBoxButtons.OK, 
                                          MessageBoxIcon.Warning);
                            return;
                        }
                        
                        EditOrder(order);
                    }
                    else
                    {
                        MessageBox.Show("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng!", "L·ªói",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"L·ªói khi t·∫£i th√¥ng tin ƒë∆°n h√†ng: {ex.Message}", "L·ªói",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    _isProcessing = false;
                }
            }
            else
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn ƒë∆°n h√†ng c·∫ßn ch·ªânh s·ª≠a!", "Th√¥ng b√°o",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private async void BtnDeleteOrder_Click(object sender, EventArgs e)
        {
            if (_isProcessing) return;

            if (dataGridViewOrders.SelectedRows.Count > 0)
            {
                try
                {
                    _isProcessing = true;
                    var selectedRow = dataGridViewOrders.SelectedRows[0];
                    var orderId = selectedRow.Cells["MaDdh"].Value?.ToString();
                    var order = await _orderRepository.GetOrderByIdAsync(orderId);

                    if (order != null)
                    {
                        // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
                        if (order.TrangThai == "Ho√†n th√†nh" || order.TrangThai == "ƒê√£ giao")
                        {
                            MessageBox.Show($"Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i '{order.TrangThai}'!\n\n" +
                                          "Ch·ªâ c√≥ th·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng n√†y.", 
                                          "Kh√¥ng th·ªÉ x√≥a", 
                                          MessageBoxButtons.OK, 
                                          MessageBoxIcon.Warning);
                            return;
                        }
                        
                        DeleteOrder(order);
                    }
                    else
                    {
                        MessageBox.Show("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ x√≥a!", "L·ªói",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"L·ªói khi t·∫£i th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ x√≥a: {ex.Message}", "L·ªói",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    _isProcessing = false;
                }
            }
            else
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn ƒë∆°n h√†ng c·∫ßn x√≥a!", "Th√¥ng b√°o",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void ShowStatusChangeDialog(Dondathang order)
        {
            var statuses = new[] { "Ch·ªù x·ª≠ l√Ω", "ƒêang x·ª≠ l√Ω", "ƒê√£ giao", "ƒê√£ h·ªßy" };
            var currentStatus = order.TrangThai ?? "Ch·ªù x·ª≠ l√Ω";
            
            var availableStatuses = statuses.Where(s => s != currentStatus).ToArray();
            
            if (availableStatuses.Length == 0)
            {
                MessageBox.Show("ƒê∆°n h√†ng n√†y ƒë√£ ·ªü tr·∫°ng th√°i cu·ªëi c√πng!", "Th√¥ng b√°o",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var statusForm = new Form
            {
                Text = "Thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng",
                Size = new Size(400, 200),
                StartPosition = FormStartPosition.CenterParent,
                FormBorderStyle = FormBorderStyle.FixedSingle,
                MaximizeBox = false,
                BackColor = Color.FromArgb(248, 249, 250)
            };

            var lblCurrent = new Label
            {
                Text = $"Tr·∫°ng th√°i hi·ªán t·∫°i: {currentStatus}",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(350, 25),
                Location = new Point(20, 20),
                TextAlign = ContentAlignment.MiddleLeft
            };

            var lblNew = new Label
            {
                Text = "Ch·ªçn tr·∫°ng th√°i m·ªõi:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 25),
                Location = new Point(20, 60),
                TextAlign = ContentAlignment.MiddleLeft
            };

            var cboNewStatus = new ComboBox
            {
                Size = new Size(200, 30),
                Location = new Point(20, 90),
                Font = new Font("Segoe UI", 10),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cboNewStatus.Items.AddRange(availableStatuses);
            cboNewStatus.SelectedIndex = 0;

            var btnOK = new Button
            {
                Text = "OK",
                Size = new Size(80, 35),
                Location = new Point(200, 120),
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                BackColor = Color.FromArgb(52, 152, 219),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                DialogResult = DialogResult.OK
            };
            btnOK.FlatAppearance.BorderSize = 0;

            var btnCancel = new Button
            {
                Text = "H·ªßy",
                Size = new Size(80, 35),
                Location = new Point(300, 120),
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                BackColor = Color.FromArgb(149, 165, 166),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                DialogResult = DialogResult.Cancel
            };
            btnCancel.FlatAppearance.BorderSize = 0;

            statusForm.Controls.AddRange(new Control[] { lblCurrent, lblNew, cboNewStatus, btnOK, btnCancel });

            if (statusForm.ShowDialog() == DialogResult.OK)
            {
                var newStatus = cboNewStatus.SelectedItem.ToString();
                _ = ChangeOrderStatus(order.MaDdh, newStatus);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _searchTimer?.Dispose();
                _context?.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}