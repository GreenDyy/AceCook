using System;
using System.Drawing;
using System.Windows.Forms;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using AceCook.Models;
using AceCook.Repositories;
using System.Collections.Generic;

namespace AceCook
{
    public partial class InventoryManagementForm : Form
    {
        private readonly AppDbContext _context;
        private readonly InventoryRepository _inventoryRepository;
        private DataGridView dataGridViewInventory;
        private TextBox txtSearch;
        private ComboBox cboWarehouseFilter;
        private ComboBox cboProductTypeFilter;
        private Button btnRefresh;
        private Button btnExport;
        private Label lblTitle;
        private Label lblTotalItems;
        private Label lblTotalValue; 
        private Panel pnlSummary;
        private List<CtTon> _currentInventory; // L∆∞u tr·ªØ d·ªØ li·ªáu hi·ªán t·∫°i

        public InventoryManagementForm(AppDbContext context)
        {
            _context = context;
            _inventoryRepository = new InventoryRepository(context);
            _currentInventory = new List<CtTon>(); // Kh·ªüi t·∫°o danh s√°ch r·ªóng
            InitializeComponent();
            SetupUI();
            _ = LoadInventory(); // S·ª≠ d·ª•ng async method
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            this.Text = "Qu·∫£n l√Ω T·ªìn kho";
            this.Size = new Size(1400, 800);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.BackColor = Color.FromArgb(248, 249, 250);
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            
            this.ResumeLayout(false);
        }

        private void SetupUI()
        {
            // Title
            lblTitle = new Label
            {
                Text = "QU·∫¢N L√ù T·ªíN KHO",
                Font = new Font("Segoe UI", 20, FontStyle.Bold),
                ForeColor = Color.FromArgb(52, 73, 94),
                Dock = DockStyle.Top,
                Height = 70,
                TextAlign = ContentAlignment.MiddleLeft,
            };

            // Summary Panel
            pnlSummary = new Panel
            {
                Dock = DockStyle.Top,
                Height = 80,
                BackColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                Margin = new Padding(0, 200, 0, 150)
            };

            var lblTotalItemsTitle = new Label
            {
                Text = "T·ªïng s·ªë s·∫£n ph·∫©m:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(150, 25),
                Location = new Point(20, 15),
                TextAlign = ContentAlignment.MiddleLeft
            };

            lblTotalItems = new Label
            {
                Text = "0",
                Font = new Font("Segoe UI", 12, FontStyle.Bold),
                ForeColor = Color.FromArgb(52, 152, 219),
                Size = new Size(100, 25),
                Location = new Point(180, 15),
                TextAlign = ContentAlignment.MiddleLeft
            };

            var lblTotalValueTitle = new Label
            {
                Text = "T·ªïng gi√° tr·ªã:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(120, 25),
                Location = new Point(320, 15),
                TextAlign = ContentAlignment.MiddleLeft
            };

            lblTotalValue = new Label
            {
                Text = "0 VNƒê",
                Font = new Font("Segoe UI", 12, FontStyle.Bold),
                ForeColor = Color.FromArgb(46, 204, 113),
                Size = new Size(200, 25),
                Location = new Point(450, 15),
                TextAlign = ContentAlignment.MiddleLeft
            };

            var lblLowStockTitle = new Label
            {
                Text = "S·∫£n ph·∫©m s·∫Øp h·∫øt:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(150, 25),
                Location = new Point(20, 45),
                TextAlign = ContentAlignment.MiddleLeft
            };

            var lblLowStockCount = new Label
            {
                Text = "0",
                Font = new Font("Segoe UI", 12, FontStyle.Bold),
                ForeColor = Color.FromArgb(231, 76, 60),
                Size = new Size(100, 25),
                Location = new Point(180, 45),
                TextAlign = ContentAlignment.MiddleLeft
            };

            pnlSummary.Controls.AddRange(new Control[] { 
                lblTotalItemsTitle, lblTotalItems, 
                lblTotalValueTitle, lblTotalValue,
                lblLowStockTitle, lblLowStockCount
            });

            // Filters Panel
            var pnlFilters = new FlowLayoutPanel
            {
                Dock = DockStyle.Top,
                Height = 90,
                BackColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                Padding = new Padding(15),
                FlowDirection = FlowDirection.LeftToRight,
                AutoScroll = true,
                WrapContents = false,
                Margin = new Padding(0, 200, 0, 150)
            };

            var lblSearch = new Label
            {
                Text = "T√¨m ki·∫øm:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                AutoSize = true,
                TextAlign = ContentAlignment.MiddleLeft,
                Margin = new Padding(0, 8, 10, 0)
            };

            txtSearch = new TextBox
            {
                Width = 200,
                Font = new Font("Segoe UI", 10),
                PlaceholderText = "M√£ SP, t√™n SP...",
                Margin = new Padding(0, 5, 20, 0)
            };
            txtSearch.TextChanged += TxtSearch_TextChanged;

            var lblWarehouse = new Label
            {
                Text = "Kho h√†ng:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                AutoSize = true,
                TextAlign = ContentAlignment.MiddleLeft,
                Margin = new Padding(0, 8, 10, 0)
            };

            cboWarehouseFilter = new ComboBox
            {
                Width = 150,
                Font = new Font("Segoe UI", 10),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Margin = new Padding(0, 5, 20, 0)
            };
            cboWarehouseFilter.Items.Add("T·∫•t c·∫£ kho");
            cboWarehouseFilter.SelectedIndex = 0;
            cboWarehouseFilter.SelectedIndexChanged += CboWarehouseFilter_SelectedIndexChanged;

            var lblProductType = new Label
            {
                Text = "Lo·∫°i SP:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                AutoSize = true,
                TextAlign = ContentAlignment.MiddleLeft,
                Margin = new Padding(0, 8, 10, 0)
            };

            cboProductTypeFilter = new ComboBox
            {
                Width = 150,
                Font = new Font("Segoe UI", 10),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Margin = new Padding(0, 5, 20, 0)
            };
            cboProductTypeFilter.Items.Add("T·∫•t c·∫£ lo·∫°i");
            cboProductTypeFilter.SelectedIndex = 0;
            cboProductTypeFilter.SelectedIndexChanged += CboProductTypeFilter_SelectedIndexChanged;

            btnRefresh = new Button
            {
                Text = "üîÑ L√†m m·ªõi",
                Width = 100,
                Height = 35,
                Font = new Font("Segoe UI", 9, FontStyle.Bold),
                BackColor = Color.FromArgb(52, 152, 219),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Margin = new Padding(0, 5, 10, 0)
            };
            btnRefresh.FlatAppearance.BorderSize = 0;
            btnRefresh.Click += BtnRefresh_Click;

            btnExport = new Button
            {
                Text = "üìä Xu·∫•t b√°o c√°o",
                Width = 120,
                Height = 35,
                Font = new Font("Segoe UI", 9, FontStyle.Bold),
                BackColor = Color.FromArgb(46, 204, 113),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Margin = new Padding(0, 5, 10, 0)
            };
            btnExport.FlatAppearance.BorderSize = 0;
            btnExport.Click += BtnExport_Click;

            pnlFilters.Controls.AddRange(new Control[] { 
                lblSearch, txtSearch, lblWarehouse, cboWarehouseFilter,
                lblProductType, cboProductTypeFilter, btnRefresh, btnExport
            });

            // Actions Panel
            var pnlActions = new FlowLayoutPanel
            {
                Dock = DockStyle.Top,
                Height = 70,
                FlowDirection = FlowDirection.LeftToRight,
                Padding = new Padding(15),
                BackColor = Color.Transparent
            };

             var btnViewDetails = CreateActionButton("üëÅÔ∏è Xem chi ti·∫øt", Color.FromArgb(108, 92, 231));
             btnViewDetails.Click += BtnViewDetails_Click;

             var btnNhapKho = CreateActionButton("üì¶ Nh·∫≠p kho", Color.FromArgb(46, 204, 113));
             btnNhapKho.Click += BtnNhapKho_Click;
 
             var btnXuatKho = CreateActionButton("üì§ Xu·∫•t kho", Color.FromArgb(255, 193, 7));
             btnXuatKho.Click += BtnXuatKho_Click;
 
             pnlActions.Controls.AddRange(new Control[] { btnViewDetails, btnNhapKho, btnXuatKho });

            // DataGridView
            dataGridViewInventory = new DataGridView
            {
                Dock = DockStyle.Fill,
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill,
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                ReadOnly = true,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                MultiSelect = false,
                BackgroundColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                GridColor = Color.LightGray,
                RowHeadersVisible = false,
                CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal,
                ColumnHeadersHeight = 50,
                RowTemplate = { Height = 50 }
            };

            // Style the DataGridView
            dataGridViewInventory.DefaultCellStyle.Font = new Font("Segoe UI", 9);
            dataGridViewInventory.ColumnHeadersDefaultCellStyle.Font = new Font("Segoe UI", 10, FontStyle.Bold);
            dataGridViewInventory.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(52, 73, 94);
            dataGridViewInventory.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
            dataGridViewInventory.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dataGridViewInventory.DefaultCellStyle.SelectionBackColor = Color.FromArgb(52, 152, 219);
            dataGridViewInventory.DefaultCellStyle.SelectionForeColor = Color.White;

            // Add all to form
            this.Controls.AddRange(new Control[] { 
                dataGridViewInventory, pnlActions, pnlFilters, pnlSummary, lblTitle 
            });
        }

        // Helper to create buttons
        private Button CreateActionButton(string text, Color backColor)
        {
            var btn = new Button
            {
                Text = text,
                Width = 200,
                Height = 40,
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                BackColor = backColor,
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Margin = new Padding(0, 0, 15, 0),
                Cursor = Cursors.Hand
            };
            btn.FlatAppearance.BorderSize = 0;
            return btn;
        }

        private async Task LoadInventory()
        {
            try
            {
                // Load data in parallel for better performance
                var inventoryTask = _inventoryRepository.GetAllInventoryAsync();
                var warehouseTask = LoadWarehouseData();
                var productTypeTask = LoadProductTypeData();

                // Wait for all tasks to complete
                var inventory = await inventoryTask;
                await warehouseTask;
                await productTypeTask;

                RefreshDataGridView(inventory);
                await UpdateSummary(inventory);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi t·∫£i d·ªØ li·ªáu t·ªìn kho: {ex.Message}", "L·ªói", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task LoadWarehouseData()
        {
            try
            {
                var warehouses = await _inventoryRepository.GetAllWarehousesAsync();
                cboWarehouseFilter.Items.Clear();
                cboWarehouseFilter.Items.Add("T·∫•t c·∫£ kho");
                foreach (var warehouse in warehouses)
                {
                    cboWarehouseFilter.Items.Add(warehouse.TenKho);
                }
                cboWarehouseFilter.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi t·∫£i danh s√°ch kho: {ex.Message}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task LoadProductTypeData()
        {
            try
            {
                var productTypes = await _inventoryRepository.GetAllProductTypesAsync();

                cboProductTypeFilter.Items.Clear();
                cboProductTypeFilter.Items.Add("T·∫•t c·∫£ lo·∫°i");
                foreach (var type in productTypes)
                {
                    cboProductTypeFilter.Items.Add(type);
                }
                cboProductTypeFilter.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi t·∫£i danh s√°ch lo·∫°i s·∫£n ph·∫©m: {ex.Message}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void RefreshDataGridView(List<CtTon> inventory)
        {
            _currentInventory = inventory; // L∆∞u tr·ªØ d·ªØ li·ªáu hi·ªán t·∫°i
            dataGridViewInventory.DataSource = null;
            dataGridViewInventory.Columns.Clear();

            // Create custom columns
            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "MaSp",
                HeaderText = "M√£ SP",
                Width = 100
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "TenSp",
                HeaderText = "T√™n s·∫£n ph·∫©m",
                Width = 200
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "Loai",
                HeaderText = "Lo·∫°i",
                Width = 120
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "MaKho",
                HeaderText = "M√£ kho",
                Width = 80
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "TenKho",
                HeaderText = "T√™n kho",
                Width = 150
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "ViTri",
                HeaderText = "V·ªã tr√≠",
                Width = 150
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "SoLuongTon",
                HeaderText = "S·ªë l∆∞·ª£ng t·ªìn",
                Width = 120
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "DonGia",
                HeaderText = "ƒê∆°n gi√°",
                Width = 120
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "ThanhTien",
                HeaderText = "Th√†nh ti·ªÅn",
                Width = 150
            });

            dataGridViewInventory.Columns.Add(new DataGridViewTextBoxColumn
            {
                Name = "TrangThai",
                HeaderText = "Tr·∫°ng th√°i",
                Width = 100
            });

            // Populate data
            foreach (var item in inventory)
            {
                var rowIndex = dataGridViewInventory.Rows.Add();
                var row = dataGridViewInventory.Rows[rowIndex];

                row.Cells["MaSp"].Value = item.MaSp;
                row.Cells["TenSp"].Value = item.MaSpNavigation?.TenSp ?? "N/A";
                row.Cells["Loai"].Value = item.MaSpNavigation?.Loai ?? "N/A";
                row.Cells["MaKho"].Value = item.MaKho;
                row.Cells["TenKho"].Value = item.MaKhoNavigation?.TenKho ?? "N/A";
                row.Cells["ViTri"].Value = item.MaKhoNavigation?.ViTri ?? "N/A";
                row.Cells["SoLuongTon"].Value = item.SoLuongTonKho ?? 0;
                row.Cells["DonGia"].Value = (item.MaSpNavigation?.Gia ?? 0).ToString("N0") + " VNƒê";
                
                var thanhTien = (item.SoLuongTonKho ?? 0) * (item.MaSpNavigation?.Gia ?? 0);
                row.Cells["ThanhTien"].Value = thanhTien.ToString("N0") + " VNƒê";

                // Style status based on stock level
                var status = GetStockStatus(item.SoLuongTonKho ?? 0);
                row.Cells["TrangThai"].Value = status;
                StyleStatusCell(row.Cells["TrangThai"], status);
            }
        }

        private string GetStockStatus(int stockLevel)
        {
            if (stockLevel == 0) return "H·∫øt h√†ng";
            if (stockLevel <= 10) return "S·∫Øp h·∫øt";
            if (stockLevel <= 50) return "Trung b√¨nh";
            return "ƒê·ªß h√†ng";
        }

        private void StyleStatusCell(DataGridViewCell cell, string status)
        {
            switch (status)
            {
                case "H·∫øt h√†ng":
                    cell.Style.ForeColor = Color.Red;
                    break;
                case "S·∫Øp h·∫øt":
                    cell.Style.ForeColor = Color.Orange;
                    break;
                case "Trung b√¨nh":
                    cell.Style.ForeColor = Color.Blue;
                    break;
                case "ƒê·ªß h√†ng":
                    cell.Style.ForeColor = Color.Green;
                    break;
            }
        }

        private async Task UpdateSummary(List<CtTon> inventory)
        {
            try
            {
                // S·ª≠ d·ª•ng Repository method ƒë·ªÉ l·∫•y th·ªëng k√™
                var (totalItems, totalValue, lowStockCount) = await _inventoryRepository.GetInventorySummaryAsync();

                lblTotalItems.Text = totalItems.ToString("N0");
                lblTotalValue.Text = totalValue.ToString("N0") + " VNƒê";
                
                // Update low stock count in summary panel
                var lowStockLabel = pnlSummary.Controls.OfType<Label>().FirstOrDefault(l => l.Text == "0");
                if (lowStockLabel != null)
                {
                    lowStockLabel.Text = lowStockCount.ToString();
                }
            }
            catch (Exception ex)
            {
                // Fallback to local calculation if repository fails
                var totalItems = inventory.Sum(i => i.SoLuongTonKho ?? 0);
                var totalValue = inventory.Sum(i => (i.SoLuongTonKho ?? 0) * (i.MaSpNavigation?.Gia ?? 0));
                var lowStockCount = inventory.Count(i => (i.SoLuongTonKho ?? 0) <= 10);

                lblTotalItems.Text = totalItems.ToString("N0");
                lblTotalValue.Text = totalValue.ToString("N0") + " VNƒê";
                
                var lowStockLabel = pnlSummary.Controls.OfType<Label>().FirstOrDefault(l => l.Text == "0");
                if (lowStockLabel != null)
                {
                    lowStockLabel.Text = lowStockCount.ToString();
                }
            }
        }

        private async void TxtSearch_TextChanged(object sender, EventArgs e)
        {
            await ApplyFilters();
        }

        private async void CboWarehouseFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            await ApplyFilters();
        }

        private async void CboProductTypeFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            await ApplyFilters();
        }

        private async Task ApplyFilters()
        {
            try
            {
                var searchTerm = txtSearch.Text.Trim();
                var selectedWarehouse = cboWarehouseFilter.SelectedItem?.ToString();
                var selectedProductType = cboProductTypeFilter.SelectedItem?.ToString();

                // S·ª≠ d·ª•ng Repository method ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc
                var inventory = await _inventoryRepository.GetFilteredInventoryAsync(
                    searchTerm, selectedWarehouse, selectedProductType);

                RefreshDataGridView(inventory);
                await UpdateSummary(inventory);
                
                // Update title with result count
                var resultCount = inventory.Count;
                var totalCount = await _inventoryRepository.GetTotalItemsAsync();
                this.Text = $"Qu·∫£n l√Ω T·ªìn kho - Hi·ªÉn th·ªã {resultCount}/{totalCount} s·∫£n ph·∫©m";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi √°p d·ª•ng b·ªô l·ªçc: {ex.Message}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

                 private async void BtnRefresh_Click(object sender, EventArgs e)
         {
             try
             {
                 // Clear all filters
                 txtSearch.Text = "";
                 cboWarehouseFilter.SelectedIndex = 0;
                 cboProductTypeFilter.SelectedIndex = 0;
                 
                 // Reload all data
                 await LoadInventory();
                 
                 MessageBox.Show("ƒê√£ l√†m m·ªõi d·ªØ li·ªáu th√†nh c√¥ng!", "Th√¥ng b√°o", 
                     MessageBoxButtons.OK, MessageBoxIcon.Information);
             }
             catch (Exception ex)
             {
                 MessageBox.Show($"L·ªói khi l√†m m·ªõi d·ªØ li·ªáu: {ex.Message}", "L·ªói",
                     MessageBoxButtons.OK, MessageBoxIcon.Error);
             }
         }

         private async void BtnViewDetails_Click(object sender, EventArgs e)
         {
             if (dataGridViewInventory.SelectedRows.Count > 0)
             {
                 var selectedRow = dataGridViewInventory.SelectedRows[0];
                 var maSp = selectedRow.Cells["MaSp"].Value?.ToString();
                 var maKho = selectedRow.Cells["MaKho"].Value?.ToString();

                 if (!string.IsNullOrEmpty(maSp) && !string.IsNullOrEmpty(maKho))
                 {
                     try
                     {
                         var inventoryItem = await _inventoryRepository.GetInventoryByIdAsync(maSp, maKho);
                         if (inventoryItem != null)
                         {
                             ViewInventoryDetails(inventoryItem);
                         }
                         else
                         {
                             MessageBox.Show("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t·ªìn kho!", "L·ªói",
                                 MessageBoxButtons.OK, MessageBoxIcon.Error);
                         }
                     }
                     catch (Exception ex)
                     {
                         MessageBox.Show($"L·ªói khi t·∫£i th√¥ng tin t·ªìn kho: {ex.Message}", "L·ªói",
                             MessageBoxButtons.OK, MessageBoxIcon.Error);
                     }
                 }
             }
             else
             {
                 MessageBox.Show("Vui l√≤ng ch·ªçn m·ªôt d√≤ng t·ªìn kho ƒë·ªÉ xem chi ti·∫øt!", "Th√¥ng b√°o",
                     MessageBoxButtons.OK, MessageBoxIcon.Information);
             }
         }

         private void ViewInventoryDetails(CtTon inventoryItem)
         {
             try
             {
                 var viewForm = new InventoryAddEditForm(_inventoryRepository, InventoryOperationType.View, inventoryItem);
                 viewForm.ShowDialog();
             }
             catch (Exception ex)
             {
                 MessageBox.Show($"L·ªói khi m·ªü form xem chi ti·∫øt: {ex.Message}", "L·ªói",
                     MessageBoxButtons.OK, MessageBoxIcon.Error);
             }
         }

        private async void BtnExport_Click(object sender, EventArgs e)
        {
            try
            {
                // S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc thay v√¨ t·∫£i l·∫°i t·∫•t c·∫£
                if (_currentInventory == null || _currentInventory.Count == 0)
                {
                    MessageBox.Show("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!", "Th√¥ng b√°o",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*",
                    FileName = $"BaoCaoTonKho_{DateTime.Now:yyyyMMdd_HHmmss}.csv"
                };

                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    await ExportToCSV(_currentInventory, saveFileDialog.FileName);
                    MessageBox.Show($"Xu·∫•t b√°o c√°o th√†nh c√¥ng! ƒê√£ xu·∫•t {_currentInventory.Count} s·∫£n ph·∫©m.", "Th√†nh c√¥ng",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi xu·∫•t b√°o c√°o: {ex.Message}", "L·ªói",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task ExportToCSV(List<CtTon> inventory, string filePath)
        {
            try
            {
                // S·ª≠ d·ª•ng Repository method ƒë·ªÉ l·∫•y d·ªØ li·ªáu b√°o c√°o
                var reportData = await _inventoryRepository.GetInventoryReportDataAsync(inventory);
                
                var lines = new List<string>
                {
                    "M√£ SP,T√™n s·∫£n ph·∫©m,Lo·∫°i,M√£ kho,T√™n kho,V·ªã tr√≠,S·ªë l∆∞·ª£ng t·ªìn,ƒê∆°n gi√°,Th√†nh ti·ªÅn,Tr·∫°ng th√°i"
                };

                foreach (dynamic item in reportData)
                {
                    var line = $"{item.MaSp}," +
                              $"\"{item.TenSp}\"," +
                              $"\"{item.Loai}\"," +
                              $"{item.MaKho}," +
                              $"\"{item.TenKho}\"," +
                              $"\"{item.ViTri}\"," +
                              $"{item.SoLuongTon}," +
                              $"{item.DonGia}," +
                              $"{item.ThanhTien}," +
                              $"\"{item.TrangThai}\"";
                    
                    lines.Add(line);
                }

                await System.IO.File.WriteAllLinesAsync(filePath, lines);
            }
            catch (Exception ex)
            {
                // Fallback to original method if repository fails
                var lines = new List<string>
                {
                    "M√£ SP,T√™n s·∫£n ph·∫©m,Lo·∫°i,M√£ kho,T√™n kho,V·ªã tr√≠,S·ªë l∆∞·ª£ng t·ªìn,ƒê∆°n gi√°,Th√†nh ti·ªÅn,Tr·∫°ng th√°i"
                };

                foreach (var item in inventory)
                {
                    var status = GetStockStatus(item.SoLuongTonKho ?? 0);
                    var thanhTien = (item.SoLuongTonKho ?? 0) * (item.MaSpNavigation?.Gia ?? 0);
                    
                    var line = $"{item.MaSp}," +
                              $"\"{item.MaSpNavigation?.TenSp ?? ""}\"," +
                              $"\"{item.MaSpNavigation?.Loai ?? ""}\"," +
                              $"{item.MaKho}," +
                              $"\"{item.MaKhoNavigation?.TenKho ?? ""}\"," +
                              $"\"{item.MaKhoNavigation?.ViTri ?? ""}\"," +
                              $"{item.SoLuongTonKho ?? 0}," +
                              $"{item.MaSpNavigation?.Gia ?? 0}," +
                              $"{thanhTien}," +
                              $"\"{status}\"";
                    
                    lines.Add(line);
                }

                await System.IO.File.WriteAllLinesAsync(filePath, lines);
            }
        }

        // Inventory Operations
        private async void BtnNhapKho_Click(object sender, EventArgs e)
        {
            if (dataGridViewInventory.SelectedRows.Count > 0)
            {
                var selectedRow = dataGridViewInventory.SelectedRows[0];
                var maSp = selectedRow.Cells["MaSp"].Value?.ToString();
                var maKho = selectedRow.Cells["MaKho"].Value?.ToString();

                if (!string.IsNullOrEmpty(maSp) && !string.IsNullOrEmpty(maKho))
                {
                    try
                    {
                        var inventoryItem = await _inventoryRepository.GetInventoryByIdAsync(maSp, maKho);
                        if (inventoryItem != null)
                        {
                            var nhapKhoForm = new InventoryAddEditForm(_inventoryRepository, InventoryOperationType.NhapKho, inventoryItem);
                            if (nhapKhoForm.ShowDialog() == DialogResult.OK)
                            {
                                MessageBox.Show("Nh·∫≠p kho th√†nh c√¥ng!", "Th√¥ng b√°o", 
                                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                                await LoadInventory();
                            }
                        }
                        else
                        {
                            MessageBox.Show("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t·ªìn kho!", "L·ªói",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"L·ªói khi m·ªü form nh·∫≠p kho: {ex.Message}", "L·ªói",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ nh·∫≠p kho!", "Th√¥ng b√°o", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private async void BtnXuatKho_Click(object sender, EventArgs e)
        {
            if (dataGridViewInventory.SelectedRows.Count > 0)
            {
                var selectedRow = dataGridViewInventory.SelectedRows[0];
                var maSp = selectedRow.Cells["MaSp"].Value?.ToString();
                var maKho = selectedRow.Cells["MaKho"].Value?.ToString();

                if (!string.IsNullOrEmpty(maSp) && !string.IsNullOrEmpty(maKho))
                {
                    try
                    {
                        var inventoryItem = await _inventoryRepository.GetInventoryByIdAsync(maSp, maKho);
                        if (inventoryItem != null)
                        {
                            var xuatKhoForm = new InventoryAddEditForm(_inventoryRepository, InventoryOperationType.XuatKho, inventoryItem);
                            if (xuatKhoForm.ShowDialog() == DialogResult.OK)
                            {
                                MessageBox.Show("Xu·∫•t kho th√†nh c√¥ng!", "Th√¥ng b√°o", 
                                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                                await LoadInventory();
                            }
                        }
                        else
                        {
                            MessageBox.Show("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t·ªìn kho!", "L·ªói",
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"L·ªói khi m·ªü form xu·∫•t kho: {ex.Message}", "L·ªói",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xu·∫•t kho!", "Th√¥ng b√°o", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
    }
} 